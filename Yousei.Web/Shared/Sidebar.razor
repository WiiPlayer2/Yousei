@inherits QueryBase<ILoadDataResult>
@inject YouseiApi Api

<div class="flex flex-col">
    <LoadDataRenderer>
        <Loading>
            loading...
        </Loading>
        <Content>
            <div class="sidebar-item">
                <a @onclick="Reload"><Icon Name="IconName.Sync" /></a>
            </div>
            <div class="sidebar-header">
                <span>Flows</span>&nbsp;
                <Icon Name="IconName.Add" />
            </div>
            @foreach (var flow in context.Database.Flows)
            {
                <div class="sidebar-clickable" @onclick="() => Selected.InvokeAsync(new FlowConfigModel(flow.Name, Api))">
                    <span>@flow.Name</span>
                </div>
            }

            @{
                var connections = context.Database.Connections.ToDictionary(o => o.Id, o => o.Configurations);
                var inactiveConnectors = connections.Keys.Where(o => !context.Connectors.Select(o => o.Name).Contains(o)).ToList();
            }
            <div class="sidebar-header">
                <span>Connections</span>
            </div>
            @foreach (var connector in context.Connectors)
            {
                connections.TryGetValue(connector.Name, out var currentConnections);
                <div class="sidebar-subheader">
                    <span>@connector.Name</span>&nbsp;
                    <Icon Name="IconName.Add" />
                </div>
                @if (currentConnections is not null)
                {
                    foreach (var connection in currentConnections)

                    {
                        <div class="sidebar-clickable" @onclick="() => Selected.InvokeAsync(new ConnectionConfigModel(connector.Name, connection.Name, Api))">
                            <span>@connection.Name</span>
                        </div>
                    }
                }
            }
            @if (inactiveConnectors.Any())
            {
                <div class="sidebar-subheader">
                    <span>Misc.</span>
                </div>
                @foreach (var connector in inactiveConnectors)
                {
                    @foreach (var connection in connections[connector])
                    {
                        <div class="sidebar-clickable" @onclick="() => Selected.InvokeAsync(new ConnectionConfigModel(connector, connection.Name, Api))">
                            <span>@connector.@connection.Name</span>
                        </div>
                    }
                }
            }
        </Content>
    </LoadDataRenderer>
</div>

@code {
    [Parameter]
    public EventCallback<ConfigModel> Selected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Api.LoadData.ExecuteAsync();
    }

    private async Task Reload()
    {
        await Api.Reload.ExecuteAsync();
        await Api.LoadData.ExecuteAsync();
    }
}