@page "/"
@inject IApi api
@using Yousei.Core
@using Newtonsoft.Json.Linq

<div class="sidebar">
    <ul>
        <li>
            <span>Flows</span>
            <ul>
                @foreach (var flow in flows)
                {
                    <li><button @onclick="() => SetConfig(new FlowConfigModel(flow, api.ConfigurationDatabase))">@flow</button></li>
                }
            </ul>
        </li>
        <li>
            <span>Connections</span>
            <ul>
                <li>
                    @foreach (var (connector, names) in configurations)
                    {
                        <span>@connector</span>
                        <ul>
                            @foreach (var name in names)
                            {
                                <li><button @onclick="() => SetConfig(new ConnectionConfigModel(connector, name, api.ConfigurationDatabase))">@name</button></li>
                            }
                        </ul>
                    }
                </li>
            </ul>
        </li>
    </ul>
</div>

<div class="main">
    <button class=".save" @onclick="Save">Save</button>
    <MonacoEditor @ref="editor" ConstructionOptions="Construct" CssClass="editor" />
</div>

@code {
    private IReadOnlyList<string> flows = new List<string>();

    private IReadOnlyDictionary<string, IReadOnlyList<string>> configurations = new Dictionary<string, IReadOnlyList<string>>();

    private MonacoEditor editor;

    private ConfigModel currentConfig = null;

    private bool isReadOnly = true;

    private StandaloneEditorConstructionOptions Construct(MonacoEditor editor)
        => new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json",
            Theme = "vs-dark",
            ReadOnly = true,
        };

    protected override async Task OnInitializedAsync()
    {
        flows = await api.ConfigurationDatabase.ListFlows();
        configurations = await api.ConfigurationDatabase.ListConfigurations();
    }

    private async Task Save()
    {
        if (currentConfig is null || isReadOnly)
            return;
        var content = await editor.GetValue();
        await currentConfig.Save(content);
    }

    private async Task SetConfig(ConfigModel configModel)
    {
        var content = await configModel.Load();
        await editor.SetValue(content);
        currentConfig = configModel;

        var isReadOnly = api.ConfigurationDatabase.IsReadOnly;
        await editor.UpdateOptions(new()
        {
            ReadOnly = isReadOnly,
        });
        this.isReadOnly = isReadOnly;
    }
}