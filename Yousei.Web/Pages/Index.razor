@page "/"
@inject IApi api
@inject IJSRuntime js;
@using Yousei.Core
@using Newtonsoft.Json.Linq
@using System.Linq

<div class="sidebar">
    <ul>
        <li>
            <span>Flows</span>
            <button @onclick="AddFlow">+</button>
            <ul>
                @foreach (var flow in flows)
                {
                    <li><button @onclick="() => SetConfig(new FlowConfigModel(flow, api.ConfigurationDatabase))">@flow</button></li>
                }
            </ul>
        </li>
        <li>
            <span>Connections</span>
            <button @onclick="AddConnector">+</button>
            <ul>
                <li>
                    @foreach (var (connector, names) in configurations)
                    {
                        <span>@connector</span>
                        <button @onclick="() => AddConfiguration(connector)">+</button>
                        <ul>
                            @foreach (var name in names)
                            {
                                <li><button @onclick="() => SetConfig(new ConnectionConfigModel(connector, name, api.ConfigurationDatabase))">@name</button></li>
                            }
                        </ul>
                    }
                </li>
            </ul>
        </li>
    </ul>
</div>

<div class="main">
    <button @onclick="Save">Save</button>
    <button @onclick="Delete">Delete</button>
    <MonacoEditor @ref="editor" ConstructionOptions="Construct" CssClass="editor" />
</div>

@code {
    private List<string> flows = new();

    private Dictionary<string, List<string>> configurations = new();

    private MonacoEditor editor;

    private ConfigModel currentConfig = null;

    private bool isReadOnly = true;

    private StandaloneEditorConstructionOptions Construct(MonacoEditor editor)
        => new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json",
            Theme = "vs-dark",
            ReadOnly = true,
        };

    protected override async Task OnInitializedAsync()
    {
        flows = new(await api.ConfigurationDatabase.ListFlows());
        configurations = (await api.ConfigurationDatabase.ListConfigurations())
            .ToDictionary(o => o.Key, o => o.Value.ToList());
        isReadOnly = await api.ConfigurationDatabase.IsReadOnly;
    }

    private async Task Save()
    {
        if (currentConfig is null || isReadOnly)
            return;

        var content = await editor.GetValue();
        await currentConfig.Save(content);
    }

    private async Task Delete()
    {
        if (currentConfig is null || isReadOnly)
            return;

        await currentConfig.Delete();
        StateHasChanged();
    }

    private async Task SetConfig(ConfigModel configModel)
    {
        string content = default;
        try
        {
            content = await configModel.Load();
        }
        catch { }

        content ??= string.Empty;
        await editor.SetValue(content);
        currentConfig = configModel;

        await editor.UpdateOptions(new()
        {
            ReadOnly = isReadOnly,
        });
    }

    private async Task AddFlow()
    {
        if (isReadOnly)
            return;

        var name = await js.InvokeAsync<string>("prompt", "Enter flow name:", string.Empty);
        flows.Add(name);
        await SetConfig(new FlowConfigModel(name, api.ConfigurationDatabase));
        this.StateHasChanged();
    }

    private async Task AddConnector()
    {
        if (isReadOnly)
            return;

        var name = await js.InvokeAsync<string>("prompt", "Enter connector name:", string.Empty);
        configurations.Add(name, new List<string>());
        this.StateHasChanged();
    }

    private async Task AddConfiguration(string connector)
    {
        if (isReadOnly)
            return;

        var name = await js.InvokeAsync<string>("prompt", "Enter configuration name:", string.Empty);
        configurations[connector].Add(name);
        await SetConfig(new ConnectionConfigModel(connector, name, api.ConfigurationDatabase));
        this.StateHasChanged();
    }
}